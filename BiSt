
#include <iostream>
using namespace std;

class Node
{
    public:
    int data;
    Node *left;
    Node *right;
    Node(int value)//initialising default values to components of the node
    {
        left=NULL;
        right=NULL;
        data=value;
    }
};//End of the class

//Class for binary search tree
class Bst
{
    public:
    Node * root;//Root node
    Bst()
    {
        root=NULL;
    }
    void insert(int value)//insert function
    {
        insertHelper(root,value);
    }
    void insertHelper(Node *current, int val)
    {
        if(current==NULL)//the first node or the root
        {
            current= new Node(val);
            if(root==NULL)
            root=current;
            return;
        }
        else if(val > current->data)//for right side
        {
            if(current->right==NULL)//pointer reaches required position
            {
                current->right=new Node(val);
            }
            else
               insertHelper(current->right,val);
        }
        else//for left side
        {
            if(current->left==NULL)//pointer reaches required position
               current->left=new Node(val);
            else
               insertHelper(current->left,val);
        }
    }
    
    void display()//display fucntion
    {
        display2(root);//function call
    }
    void display2(Node * current)
    {
        if(current==NULL)
        return;
        display2(current->left);//left data
        cout<<current->data<<"->";
        display2(current->right);//right data
    }
    
    Node *search(int value)//search function
    {
        return search2(root,value);
    }
    Node * search2(Node * current,int value)
    {
        //searching value in cuurent node or if it is null
        if(current==NULL || value==current->data)
        return current;
        else if(current->data > value)//search in the left side of the root
        search2(current->left,value);
        else//otherwise search in the left side of the root
        search2(current->right,value);
    }
};

//main function
int main()
{
    Bst b1;//object of class Bist
    //Insert some values
    b1.insert(12);
    b1.insert(3);
    b1.insert(13);
    b1.insert(8);
    b1.insert(7);
    b1.insert(1);
    b1.insert(9);
    b1.insert(18);
    b1.insert(4);
    b1.insert(21);
    b1.display();//Display the values
    cout<<endl;
    
    int a;
    cout<<"Please enter a value to be searches in tree. \n";
    cin>>a;
    //search the value entered by user
    if(b1.search(a)==NULL)
    cout<<a<<" is absent in the tree"<<endl;
    else
    cout<<a<<" is present in the tree"<<endl;
    return 0;
}


